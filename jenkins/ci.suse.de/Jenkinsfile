def test_results = ''
def stagingproject = ''
def testproject = ''
def changes_to_test = ''
pipeline {
    agent none
    stages {
        stage('Creating test package from change') {
            when {
                anyOf {
                    expression { return params.github_pr != '' }
                    expression { return params.submitrequest_id != '' }
                }
            }
            agent {
                label "openstack-trackupstream"
            }
            steps {
                script {
                    testproject = sh(returnStdout: true, script: 'scripts/jenkins/ardana/pipeline/select-project.sh').trim()
                    sh "scripts/jenkins/ardana/pipeline/update-package.sh ${testproject}"
                }
            }
        }
        stage('Updating staging repository') {
            when {
                allOf {
                    expression { return params.github_pr == '' }
                    expression { return params.submitrequest_id == '' }
                }
            }
            agent {
                label "openstack-trackupstream"
            }
            steps {
                script {
                    stagingproject = sh(returnStdout: true, script: 'scripts/jenkins/ardana/pipeline/select-project.sh').trim()
                    /*
                    changes_to_test = sh(returnStdout: true, script: "scripts/jenkins/ardana/pipeline/update-packages.sh ${stagingproject}").trim()
                    */
                    changes_to_test = 'found changes to test'
                }
            }
        }
        stage('Running tests') {
            when {
                anyOf {
                    expression { return changes_to_test =~ 'found changes to test' }
                    expression { return params.github_pr != '' }
                    expression { return params.submitrequest_id != '' }
                }
            }
            agent {
                label "cloud-ardana-ci"
            }
            steps {
                echo "Setting up test nodes"
                echo "Using Cloud repo: ${stagingproject}"
                script {
                    test_results = build(job: 'colleen-openstack-ardana-copy', parameters: [[$class: 'StringParameterValue', 'name': 'test_repository', value: "http://download.suse.de/ibs/${stagingproject.replaceAll(':', ':/')}:/master/standard"]]).getResult()
                }
                echo "${test_results}"
            }
        }
        stage('Report results (github)') {
            agent {
                label "cloud-trigger"
            }
            when {
                expression { return params.github_pr != '' }
            }
            steps {
                script {
                    sh "scripts/jenkins/ardana/pipeline/report-pr.sh ${test_results}"
                }
            }
        }
        stage('Report results (OBS)') {
            agent {
                label "openstack-trackupstream"
            }
            when {
                expression { return params.submitrequest_id != '' }
            }
            steps {
                sh "scripts/jenkins/ardana/pipeline/report-sr.sh ${test_results}"
            }
        }
        stage('Accept changes') {
            when {
                allOf {
                    expression { return stagingproject != '' }
                    expression { return params.github_pr == '' }
                    expression { return params.submitrequest_id == '' }
                    expression { return test_results == 'success' }
                }
            }
            agent {
                label "openstack-trackupstream"
            }
            steps {
                sh "scripts/jenkins/ardana/pipeline/submit-packages.sh ${stagingproject}"
            }
        }
    }
}
